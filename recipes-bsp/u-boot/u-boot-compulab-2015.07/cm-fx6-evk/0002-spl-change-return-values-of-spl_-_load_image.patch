From 6c7954d73e9d0fe5a4670874d21af4d85b3551c5 Mon Sep 17 00:00:00 2001
From: Nikita Kiryanov <nikita@compulab.co.il>
Date: Wed, 31 Dec 2014 15:38:23 +0200
Subject: [PATCH] spl: change return values of spl_*_load_image()

Make spl_*_load_image() functions return a value instead of
hanging if a problem is encountered. This enables main spl code
to make the decision whether to hang or not, thus preparing
it to support alternative boot devices.

Some boot devices (namely nand and spi) do not hang on error.
Instead, they return normally and SPL proceeds to boot the
contents of the load address. This is considered a bug and
is rectified by hanging on error for these devices as well.

Signed-off-by: Nikita Kiryanov <nikita@compulab.co.il>
---
 common/spl/spl.c               | 40 +++++++++++++++++++----------
 common/spl/spl_mmc.c           | 46 +++++++++++++++++++++-------------
 common/spl/spl_nand.c          | 14 +++++++----
 common/spl/spl_net.c           |  9 ++++---
 common/spl/spl_nor.c           |  4 ++-
 common/spl/spl_onenand.c       |  4 ++-
 common/spl/spl_sata.c          | 11 +++++---
 common/spl/spl_usb.c           | 17 ++++++++-----
 common/spl/spl_ymodem.c        |  7 +++---
 drivers/mtd/spi/spi_spl_load.c | 17 +++++++++----
 include/spl.h                  | 18 ++++++-------
 11 files changed, 120 insertions(+), 67 deletions(-)

diff --git a/common/spl/spl.c b/common/spl/spl.c
index aeb0645eda..6480fd98ce 100644
--- a/common/spl/spl.c
+++ b/common/spl/spl.c
@@ -132,7 +132,7 @@ __weak void __noreturn jump_to_image_no_args(struct spl_image_info *spl_image)
 }
 
 #ifdef CONFIG_SPL_RAM_DEVICE
-static void spl_ram_load_image(void)
+static int spl_ram_load_image(void)
 {
 	const struct image_header *header;
 
@@ -145,6 +145,8 @@ static void spl_ram_load_image(void)
 		(CONFIG_SYS_TEXT_BASE -	sizeof(struct image_header));
 
 	spl_parse_image_header(header);
+
+	return 0;
 }
 #endif
 
@@ -196,63 +198,75 @@ void board_init_r(gd_t *dummy1, ulong dummy2)
 	switch (boot_device) {
 #ifdef CONFIG_SPL_RAM_DEVICE
 	case BOOT_DEVICE_RAM:
-		spl_ram_load_image();
+		if (spl_ram_load_image())
+			hang();
 		break;
 #endif
 #ifdef CONFIG_SPL_MMC_SUPPORT
 	case BOOT_DEVICE_MMC1:
 	case BOOT_DEVICE_MMC2:
 	case BOOT_DEVICE_MMC2_2:
-		spl_mmc_load_image();
+		if (spl_mmc_load_image())
+			hang();
 		break;
 #endif
 #ifdef CONFIG_SPL_NAND_SUPPORT
 	case BOOT_DEVICE_NAND:
-		spl_nand_load_image();
+		if (spl_nand_load_image())
+			hang();
 		break;
 #endif
 #ifdef CONFIG_SPL_ONENAND_SUPPORT
 	case BOOT_DEVICE_ONENAND:
-		spl_onenand_load_image();
+		if (spl_onenand_load_image())
+			hang();
 		break;
 #endif
 #ifdef CONFIG_SPL_NOR_SUPPORT
 	case BOOT_DEVICE_NOR:
-		spl_nor_load_image();
+		if (spl_nor_load_image())
+			hang();
 		break;
 #endif
 #ifdef CONFIG_SPL_YMODEM_SUPPORT
 	case BOOT_DEVICE_UART:
-		spl_ymodem_load_image();
+		if (spl_ymodem_load_image())
+			hang();
 		break;
 #endif
 #ifdef CONFIG_SPL_SPI_SUPPORT
 	case BOOT_DEVICE_SPI:
-		spl_spi_load_image();
+		if (spl_spi_load_image())
+			hang();
 		break;
 #endif
 #ifdef CONFIG_SPL_ETH_SUPPORT
 	case BOOT_DEVICE_CPGMAC:
 #ifdef CONFIG_SPL_ETH_DEVICE
-		spl_net_load_image(CONFIG_SPL_ETH_DEVICE);
+		if (spl_net_load_image(CONFIG_SPL_ETH_DEVICE))
+			hang();
 #else
-		spl_net_load_image(NULL);
+		if (spl_net_load_image(NULL))
+			hang();
 #endif
 		break;
 #endif
 #ifdef CONFIG_SPL_USBETH_SUPPORT
 	case BOOT_DEVICE_USBETH:
-		spl_net_load_image("usb_ether");
+		if (spl_net_load_image("usb_ether"))
+			hang();
 		break;
 #endif
 #ifdef CONFIG_SPL_USB_SUPPORT
 	case BOOT_DEVICE_USB:
-		spl_usb_load_image();
+		if (spl_usb_load_image())
+			hang();
 		break;
 #endif
 #ifdef CONFIG_SPL_SATA_SUPPORT
 	case BOOT_DEVICE_SATA:
-		spl_sata_load_image();
+		if (spl_sata_load_image())
+			hang();
 		break;
 #endif
 #ifdef CONFIG_SPL_BOARD_LOAD_IMAGE
diff --git a/common/spl/spl_mmc.c b/common/spl/spl_mmc.c
index 552f80d1e3..9ed312e11a 100644
--- a/common/spl/spl_mmc.c
+++ b/common/spl/spl_mmc.c
@@ -9,6 +9,7 @@
 #include <common.h>
 #include <spl.h>
 #include <linux/compiler.h>
+#include <errno.h>
 #include <asm/u-boot.h>
 #include <mmc.h>
 #include <image.h>
@@ -92,14 +93,20 @@ static int mmc_load_image_raw_os(struct mmc *mmc)
 }
 #endif
 
-void spl_mmc_load_image(void)
+int spl_mmc_load_image(void)
 {
 	struct mmc *mmc;
 	u32 boot_mode;
 	int err;
 	__maybe_unused int part;
 
-	mmc_initialize(gd->bd);
+	err = mmc_initialize(gd->bd);
+	if (err) {
+#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
+		printf("spl: mmc_initialize failed: err - %d\n", err);
+#endif
+		return err;
+	}
 
 	/* We register only one device. So, the dev id is always 0 */
 	mmc = find_mmc_device(0);
@@ -107,7 +114,7 @@ void spl_mmc_load_image(void)
 #ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 		puts("spl: mmc device not found\n");
 #endif
-		hang();
+		return -ENODEV;
 	}
 
 	err = mmc_init(mmc);
@@ -115,7 +122,7 @@ void spl_mmc_load_image(void)
 #ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 		printf("spl: mmc init failed with error: %d\n", err);
 #endif
-		hang();
+		return err;
 	}
 
 	boot_mode = spl_boot_mode();
@@ -127,19 +134,19 @@ void spl_mmc_load_image(void)
 		if (!spl_start_uboot()) {
 			err = mmc_load_image_raw_os(mmc);
 			if (!err)
-				return;
+				return err;
 		}
 #endif
 #if defined(CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_PARTITION)
 		err = mmc_load_image_raw_partition(mmc,
 			CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_PARTITION);
 		if (!err)
-			return;
+			return err;
 #elif defined(CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR)
 		err = mmc_load_image_raw_sector(mmc,
 			CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR);
 		if (!err)
-			return;
+			return err;
 #endif
 	case MMCSD_MODE_FS:
 		debug("spl: mmc boot mode: fs\n");
@@ -151,7 +158,7 @@ void spl_mmc_load_image(void)
 			err = spl_load_image_fat_os(&mmc->block_dev,
 				CONFIG_SYS_MMCSD_FS_BOOT_PARTITION);
 			if (!err)
-				return;
+				return err;
 		}
 #endif
 #ifdef CONFIG_SPL_FS_LOAD_PAYLOAD_NAME
@@ -159,7 +166,7 @@ void spl_mmc_load_image(void)
 					 CONFIG_SYS_MMCSD_FS_BOOT_PARTITION,
 					 CONFIG_SPL_FS_LOAD_PAYLOAD_NAME);
 		if (!err)
-			return;
+			return err;
 #endif
 #endif
 #ifdef CONFIG_SPL_EXT_SUPPORT
@@ -168,7 +175,7 @@ void spl_mmc_load_image(void)
 			err = spl_load_image_ext_os(&mmc->block_dev,
 				CONFIG_SYS_MMCSD_FS_BOOT_PARTITION);
 			if (!err)
-				return;
+				return err;
 		}
 #endif
 #ifdef CONFIG_SPL_FS_LOAD_PAYLOAD_NAME
@@ -176,7 +183,7 @@ void spl_mmc_load_image(void)
 					 CONFIG_SYS_MMCSD_FS_BOOT_PARTITION,
 					 CONFIG_SPL_FS_LOAD_PAYLOAD_NAME);
 		if (!err)
-			return;
+			return err;
 #endif
 #endif
 #endif
@@ -192,30 +199,31 @@ void spl_mmc_load_image(void)
 		if (part == 7)
 			part = 0;
 
-		if (mmc_switch_part(0, part)) {
+		err = mmc_switch_part(0, part);
+		if (err) {
 #ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
-			puts("spl: mmc partition switch failed\n");
+			printf("MMC partition switch failed: err - %d\n", err);
 #endif
-			hang();
+			return err;
 		}
 
 #ifdef CONFIG_SPL_OS_BOOT
 		if (!spl_start_uboot()) {
 			err = mmc_load_image_raw_os(mmc);
 			if (!err)
-				return;
+				return err;
 		}
 #endif
 #if defined(CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_PARTITION)
 		err = mmc_load_image_raw_partition(mmc,
 			CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_PARTITION);
 		if (!err)
-			return;
+			return err;
 #elif defined(CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR)
 		err = mmc_load_image_raw_sector(mmc,
 			CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR);
 		if (!err)
-			return;
+			return err;
 #endif
 #endif
 	case MMCSD_MODE_UNDEFINED:
@@ -226,6 +234,8 @@ void spl_mmc_load_image(void)
 		else
 			puts("spl: mmc: wrong boot mode\n");
 #endif
-		hang();
+		return -EINVAL;
 	}
+
+	return err;
 }
diff --git a/common/spl/spl_nand.c b/common/spl/spl_nand.c
index 6e4e6414a4..f486d9a3c6 100644
--- a/common/spl/spl_nand.c
+++ b/common/spl/spl_nand.c
@@ -35,8 +35,9 @@ static int spl_nand_load_element(int offset, struct image_header *header)
 				   (void *)spl_image.load_addr);
 }
 
-void spl_nand_load_image(void)
+int spl_nand_load_image(void)
 {
+	int err;
 	struct image_header *header;
 	int *src __attribute__((unused));
 	int *dst __attribute__((unused));
@@ -73,10 +74,12 @@ void spl_nand_load_image(void)
 		spl_parse_image_header(header);
 		if (header->ih_os == IH_OS_LINUX) {
 			/* happy - was a linux */
-			nand_spl_load_image(CONFIG_SYS_NAND_SPL_KERNEL_OFFS,
-				spl_image.size, (void *)spl_image.load_addr);
+			err = nand_spl_load_image(
+				CONFIG_SYS_NAND_SPL_KERNEL_OFFS,
+				spl_image.size,
+				(void *)spl_image.load_addr);
 			nand_deselect();
-			return;
+			return err;
 		} else {
 			puts("The Expected Linux image was not "
 				"found. Please check your NAND "
@@ -92,7 +95,8 @@ void spl_nand_load_image(void)
 #endif
 #endif
 	/* Load u-boot */
-	spl_nand_load_element(CONFIG_SYS_NAND_U_BOOT_OFFS, header);
+	err = spl_nand_load_element(CONFIG_SYS_NAND_U_BOOT_OFFS, header);
 	nand_deselect();
+	return err;
 }
 #endif
diff --git a/common/spl/spl_net.c b/common/spl/spl_net.c
index 217a435c73..63b20d8200 100644
--- a/common/spl/spl_net.c
+++ b/common/spl/spl_net.c
@@ -8,12 +8,13 @@
  * SPDX-License-Identifier:	GPL-2.0+
  */
 #include <common.h>
+#include <errno.h>
 #include <spl.h>
 #include <net.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
-void spl_net_load_image(const char *device)
+int spl_net_load_image(const char *device)
 {
 	int rv;
 
@@ -24,14 +25,16 @@ void spl_net_load_image(const char *device)
 	rv = eth_initialize();
 	if (rv == 0) {
 		printf("No Ethernet devices found\n");
-		hang();
+		return -ENODEV;
 	}
 	if (device)
 		setenv("ethact", device);
 	rv = net_loop(BOOTP);
 	if (rv < 0) {
 		printf("Problem booting with BOOTP\n");
-		hang();
+		return rv;
 	}
 	spl_parse_image_header((struct image_header *)load_addr);
+
+	return 0;
 }
diff --git a/common/spl/spl_nor.c b/common/spl/spl_nor.c
index c2fee01ac1..c18c550fa9 100644
--- a/common/spl/spl_nor.c
+++ b/common/spl/spl_nor.c
@@ -7,7 +7,7 @@
 #include <common.h>
 #include <spl.h>
 
-void spl_nor_load_image(void)
+int spl_nor_load_image(void)
 {
 	/*
 	 * Loading of the payload to SDRAM is done with skipping of
@@ -62,4 +62,6 @@ void spl_nor_load_image(void)
 	memcpy((void *)spl_image.load_addr,
 	       (void *)(CONFIG_SYS_UBOOT_BASE + sizeof(struct image_header)),
 	       spl_image.size);
+
+	return 0;
 }
diff --git a/common/spl/spl_onenand.c b/common/spl/spl_onenand.c
index d8d80974f2..af7d82eb62 100644
--- a/common/spl/spl_onenand.c
+++ b/common/spl/spl_onenand.c
@@ -14,7 +14,7 @@
 #include <asm/io.h>
 #include <onenand_uboot.h>
 
-void spl_onenand_load_image(void)
+int spl_onenand_load_image(void)
 {
 	struct image_header *header;
 
@@ -28,4 +28,6 @@ void spl_onenand_load_image(void)
 	spl_parse_image_header(header);
 	onenand_spl_load_image(CONFIG_SYS_ONENAND_U_BOOT_OFFS,
 		spl_image.size, (void *)spl_image.load_addr);
+
+	return 0;
 }
diff --git a/common/spl/spl_sata.c b/common/spl/spl_sata.c
index 2a5eb29857..3ba4c249b7 100644
--- a/common/spl/spl_sata.c
+++ b/common/spl/spl_sata.c
@@ -14,12 +14,13 @@
 #include <asm/u-boot.h>
 #include <sata.h>
 #include <scsi.h>
+#include <errno.h>
 #include <fat.h>
 #include <image.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
-void spl_sata_load_image(void)
+int spl_sata_load_image(void)
 {
 	int err;
 	block_dev_desc_t *stor_dev;
@@ -29,11 +30,13 @@ void spl_sata_load_image(void)
 #ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 		printf("spl: sata init failed: err - %d\n", err);
 #endif
-		hang();
+		return err;
 	} else {
 		/* try to recognize storage devices immediately */
 		scsi_scan(0);
 		stor_dev = scsi_get_dev(0);
+		if (!stor_dev)
+			return -ENODEV;
 	}
 
 #ifdef CONFIG_SPL_OS_BOOT
@@ -45,6 +48,8 @@ void spl_sata_load_image(void)
 				CONFIG_SPL_FS_LOAD_PAYLOAD_NAME);
 	if (err) {
 		puts("Error loading sata device\n");
-		hang();
+		return err;
 	}
+
+	return 0;
 }
diff --git a/common/spl/spl_usb.c b/common/spl/spl_usb.c
index c81672b798..588b85c4a5 100644
--- a/common/spl/spl_usb.c
+++ b/common/spl/spl_usb.c
@@ -12,6 +12,7 @@
 #include <common.h>
 #include <spl.h>
 #include <asm/u-boot.h>
+#include <errno.h>
 #include <usb.h>
 #include <fat.h>
 
@@ -21,7 +22,7 @@ DECLARE_GLOBAL_DATA_PTR;
 static int usb_stor_curr_dev = -1; /* current device */
 #endif
 
-void spl_usb_load_image(void)
+int spl_usb_load_image(void)
 {
 	int err;
 	block_dev_desc_t *stor_dev;
@@ -32,13 +33,15 @@ void spl_usb_load_image(void)
 #ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 		printf("%s: usb init failed: err - %d\n", __func__, err);
 #endif
-		hang();
+		return err;
 	}
 
 #ifdef CONFIG_USB_STORAGE
 	/* try to recognize storage devices immediately */
 	usb_stor_curr_dev = usb_stor_scan(1);
 	stor_dev = usb_stor_get_dev(usb_stor_curr_dev);
+	if (!stor_dev)
+		return -ENODEV;
 #endif
 
 	debug("boot mode - FAT\n");
@@ -51,8 +54,10 @@ void spl_usb_load_image(void)
 				CONFIG_SYS_USB_FAT_BOOT_PARTITION,
 				CONFIG_SPL_FS_LOAD_PAYLOAD_NAME);
 
-		if (err) {
-			puts("Error loading USB device\n");
-			hang();
-		}
+	if (err) {
+		puts("Error loading from USB device\n");
+		return err;
+	}
+
+	return 0;
 }
diff --git a/common/spl/spl_ymodem.c b/common/spl/spl_ymodem.c
index 0f1e997079..1fef251802 100644
--- a/common/spl/spl_ymodem.c
+++ b/common/spl/spl_ymodem.c
@@ -23,7 +23,7 @@ static int getcymodem(void) {
 	return -1;
 }
 
-void spl_ymodem_load_image(void)
+int spl_ymodem_load_image(void)
 {
 	int size = 0;
 	int err;
@@ -47,13 +47,14 @@ void spl_ymodem_load_image(void)
 			addr += res;
 			memcpy((char *)(store_addr), buf, res);
 		}
+
+		printf("Loaded %d bytes\n", size);
 	} else {
 		printf("spl: ymodem err - %s\n", xyzModem_error(err));
-		hang();
 	}
 
 	xyzModem_stream_close(&err);
 	xyzModem_stream_terminate(false, &getcymodem);
 
-	printf("Loaded %d bytes\n", size);
+	return ret;
 }
diff --git a/drivers/mtd/spi/spi_spl_load.c b/drivers/mtd/spi/spi_spl_load.c
index 2e0c871219..ca56fe9015 100644
--- a/drivers/mtd/spi/spi_spl_load.c
+++ b/drivers/mtd/spi/spi_spl_load.c
@@ -12,6 +12,7 @@
 #include <common.h>
 #include <spi.h>
 #include <spi_flash.h>
+#include <errno.h>
 #include <spl.h>
 
 #ifdef CONFIG_SPL_OS_BOOT
@@ -48,8 +49,9 @@ static int spi_load_image_os(struct spi_flash *flash,
  * configured and available since this code loads the main U-Boot image
  * from SPI into SDRAM and starts it from there.
  */
-void spl_spi_load_image(void)
+int spl_spi_load_image(void)
 {
+	int err = 0;
 	struct spi_flash *flash;
 	struct image_header *header;
 
@@ -63,7 +65,7 @@ void spl_spi_load_image(void)
 				CONFIG_SF_DEFAULT_MODE);
 	if (!flash) {
 		puts("SPI probe failed.\n");
-		hang();
+		return -ENODEV;
 	}
 
 	/* use CONFIG_SYS_TEXT_BASE as temporary storage area */
@@ -74,10 +76,15 @@ void spl_spi_load_image(void)
 #endif
 	{
 		/* Load u-boot, mkimage header is 64 bytes. */
-		spi_flash_read(flash, CONFIG_SYS_SPI_U_BOOT_OFFS, 0x40,
-			       (void *)header);
+		err = spi_flash_read(flash, CONFIG_SYS_SPI_U_BOOT_OFFS, 0x40,
+				     (void *)header);
+		if (err)
+			return err;
+
 		spl_parse_image_header(header);
-		spi_flash_read(flash, CONFIG_SYS_SPI_U_BOOT_OFFS,
+		err = spi_flash_read(flash, CONFIG_SYS_SPI_U_BOOT_OFFS,
 			       spl_image.size, (void *)spl_image.load_addr);
 	}
+
+	return err;
 }
diff --git a/include/spl.h b/include/spl.h
index d19940f2a3..6cc6aad59a 100644
--- a/include/spl.h
+++ b/include/spl.h
@@ -45,31 +45,31 @@ int spl_start_uboot(void);
 void spl_display_print(void);
 
 /* NAND SPL functions */
-void spl_nand_load_image(void);
+int spl_nand_load_image(void);
 
 /* OneNAND SPL functions */
-void spl_onenand_load_image(void);
+int spl_onenand_load_image(void);
 
 /* NOR SPL functions */
-void spl_nor_load_image(void);
+int spl_nor_load_image(void);
 
 /* MMC SPL functions */
-void spl_mmc_load_image(void);
+int spl_mmc_load_image(void);
 
 /* YMODEM SPL functions */
-void spl_ymodem_load_image(void);
+int spl_ymodem_load_image(void);
 
 /* SPI SPL functions */
-void spl_spi_load_image(void);
+int spl_spi_load_image(void);
 
 /* Ethernet SPL functions */
-void spl_net_load_image(const char *device);
+int spl_net_load_image(const char *device);
 
 /* USB SPL functions */
-void spl_usb_load_image(void);
+int spl_usb_load_image(void);
 
 /* SATA SPL functions */
-void spl_sata_load_image(void);
+int spl_sata_load_image(void);
 
 /* SPL FAT image functions */
 int spl_load_image_fat(block_dev_desc_t *block_dev, int partition, const char *filename);
-- 
2.29.0

